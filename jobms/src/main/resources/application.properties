server.port=8082
spring.application.name=job-service

# H2 Database
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:jobms
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

# PostgreSQL
#spring.datasource.url=jdbc:postgresql://localhost:5432/job
#spring.datasource.username=embarkx
#spring.datasource.password=embarkx
#spring.jpa.database=POSTGRESQL
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# Zipkin
management.tracing.sampling.probability=1.0

# Config server - use this if we want to maintain our configs in centralized repo
#spring.config.import=optional:configserver:http://localhost:8080
spring.profiles.active=dev

# Resilience4J
# circuit breaker - companyBreaker is the name of circuit breaker
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
# If failure rate is more than 50%, circuit breaker moves from CLOSED to OPEN state
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based
# retry
resilience4j.circuitbreaker.instances.companyBreaker.max-attempts=5
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration=2s
# rate limit
# these will allow 2 calls for every 4sec as mentioned below, other calls will be rejected immediately as we gave 0sec as below
resilience4j.ratelimiter.instances.companyBreaker.timeout-duration=0
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period=4
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period=2

# Actuator - enables only health endpoint, * enables all endpoints
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

management.health.circuitbreakers.enabled=true